# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/10_datasets.ipynb.

# %% auto 0
__all__ = ['IdsEvents', 'log_event_change', 'IDsDataset']

# %% ../notebooks/10_datasets.ipynb 1
import polars as pl

# import holoviews as hv
from datetime import timedelta
from pathlib import Path
from pydantic import BaseModel, Field
from beforerr.io.polars import save
from beforerr.project import savename, datadir, produce_or_load_file
from space_analysis.meta import PlasmaDataset, TempDataset, MagDataset

from typing import Literal
from loguru import logger

# %% ../notebooks/10_datasets.ipynb 3
from .utils.basic import df2ts
from .integration import combine_features, calc_combined_features
from .core.pipeline import ids_finder

# %% ../notebooks/10_datasets.ipynb 4
def select_row(df: pl.DataFrame, index: int):
    if "index" not in df.columns:
        df = df.with_row_index()
    predicate = pl.col("index") == index
    return df.row(by_predicate=predicate, named=True)

# %% ../notebooks/10_datasets.ipynb 5
class IdsEvents(BaseModel):
    """Core class to handle discontinuity events in a dataset."""

    class Config:
        extra = "allow"
        arbitrary_types_allowed = True

    name: str = None
    data: pl.LazyFrame = None
    mag_meta: MagDataset = MagDataset()

    ts: timedelta = None
    """time resolution of the dataset"""
    tau: timedelta = None
    """time interval used to find events"""
    events: pl.DataFrame = None
    method: Literal["fit", "derivative"] = "fit"

    fmt: str = "arrow"
    data_dir: Path = datadir()

    def find_events(self, **kwargs):
        # To be deprecated, use `produce_or_load_file` instead
        self.produce_or_load_file(**kwargs)
        return self

    def get_event(self, index: int):
        return select_row(self.events, index)

    def get_event_data(
        self,
        event,
        start_col="t.d_start",
        end_col="t.d_end",
        offset=timedelta(seconds=1),
        **kwargs,
    ):
        start = event[start_col] - offset
        end = event[end_col] + offset

        _data = self.data.filter(pl.col("time").is_between(start, end))
        return df2ts(_data, self.mag_meta.B_cols)

    @property
    def fname(self):
        include_fields = ("ts", "tau", "name", "method")
        return savename(
            self.model_dump(include=include_fields),
            prefix="events",
            suffix=self.fmt,
        )

    @property
    def file(self):
        return self.data_dir / self.fname

    def produce_or_load_file(self, **kwargs):
        config = dict(
            detection_df=self.data,
            tau=self.tau,
            ts=self.ts,
            method=self.method,
            bcols=self.mag_meta.B_cols,
            **kwargs,
        )
        data = produce_or_load_file(
            f=ids_finder,
            config=config,
            file=self.file,
            save_func=save,
        )[0]
        self.events = data
        return data

# %% ../notebooks/10_datasets.ipynb 6
def log_event_change(event, logger=logger):
    logger.debug(
        f"""CHANGE INFO
        n.change: {event.get('n.change')}
        v.ion.change: {event.get('v.ion.change')}
        T.change: {event.get('T.change')}
        v.Alfven.change: {event.get('v.Alfven.change')}
        v.ion.change.l: {event.get('v.ion.change.l')}
        v.Alfven.change.l: {event.get('v.Alfven.change.l')}
        """
    )

# %% ../notebooks/10_datasets.ipynb 8
class IDsDataset(IdsEvents):
    """Extend the IdsEvents class to handle plasma and temperature data."""

    data: pl.LazyFrame = Field(default=None, alias="mag_data")

    plasma_data: pl.LazyFrame = None
    plasma_meta: PlasmaDataset = PlasmaDataset()

    ion_temp_data: pl.LazyFrame = None
    ion_temp_meta: TempDataset = TempDataset()
    e_temp_data: pl.LazyFrame = None
    e_temp_meta: TempDataset = TempDataset()

    def update_events(self, **kwargs):
        return self.update_events_with_plasma_data(
            **kwargs
        ).update_events_with_temp_data(**kwargs)

    def update_events_with_plasma_data(self, **kwargs):
        # TypeError: the truth value of a LazyFrame is ambiguous
        if self.plasma_data is not None:
            df_combined = combine_features(
                self.events,
                self.plasma_data.collect(),
                plasma_meta=self.plasma_meta,
                **kwargs,
            )

            self.events = calc_combined_features(
                df_combined,
                plasma_meta=self.plasma_meta,
                **kwargs,
            )
        else:
            logger.info("Plasma data is not available.")

        return self

    def update_events_with_temp_data(self, **kwargs):
        on = "time"

        if self.ion_temp_data is not None:
            self.events = self.events.sort(on).join_asof(
                self.ion_temp_data.sort(on).collect(), on=on
            )
        else:
            logger.info("Ion temperature data is not available.")

        if self.e_temp_data is not None:
            self.events = self.events.sort(on).join_asof(
                self.e_temp_data.sort(on).collect(), on=on
            )
        else:
            logger.info("Electron temperature data is not available.")
        return self

    def plot(self, type="overview", event=None, index=None, **kwargs):
        event = event or self.get_event(index)
        if type == "overview":
            return self.overview_plot(event, **kwargs)
