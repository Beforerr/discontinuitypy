# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/10_datasets.ipynb.

# %% auto 0
__all__ = ['IdsEvents', 'IDsDataset']

# %% ../../notebooks/10_datasets.ipynb 1
import polars as pl
from datetime import timedelta
from pathlib import Path
from pydantic import BaseModel, Field, ConfigDict
from beforerr.project import savename, datadir, produce_or_load_file
from space_analysis.core import MagVariable
from space_analysis.meta import PlasmaDataset, TempDataset
from .utils.naming import standardize_plasma_data
from .detection.variance import detect_variance

from typing_extensions import deprecated
from typing import Callable, Literal

# %% ../../notebooks/10_datasets.ipynb 3
from .utils.basic import df2ts
from .integration import update_events
from .core.pipeline import ids_finder

# %% ../../notebooks/10_datasets.ipynb 4
def select_row(df: pl.DataFrame, index: int):
    if "index" not in df.columns:
        df = df.with_row_index()
    predicate = pl.col("index") == index
    return df.row(by_predicate=predicate, named=True)

# %% ../../notebooks/10_datasets.ipynb 5
class IdsEvents(BaseModel):
    """Core class to handle discontinuity events in a dataset."""

    model_config = ConfigDict(extra="allow", arbitrary_types_allowed=True)

    name: str = "events"
    data: pl.LazyFrame = None
    mag_meta: MagVariable = MagVariable()

    ts: timedelta = None
    """time resolution of the dataset"""
    events: pl.DataFrame = None
    detect_func: Callable = detect_variance
    detect_kwargs: dict = Field(default_factory=dict)
    method: Literal["fit", "derivative"] = "fit"

    file_fmt: str = "arrow"
    file_path: Path = datadir()

    @deprecated("Use `find_events` instead")
    def find_events(self, **kwargs):
        data, _ = self.produce_or_load(**kwargs)
        self.events = data
        return self

    @property
    def config_detection(self):
        detect_kwargs = dict(ts=self.ts or self.mag_meta.ts) | self.detect_kwargs
        return dict(
            detection_df=self.data,
            detect_func=self.detect_func,
            detect_kwargs=detect_kwargs,
            bcols=self.mag_meta.B_cols,
            method=self.method,
        )

    def produce_or_load(self, file=None, force=False, **kwargs):
        file = file or self.file
        config = self.config_detection | kwargs
        return produce_or_load_file(f=ids_finder, config=config, file=file, force=force)

    @property
    def file(self):
        return self._file()

    @property
    def _file_prefix(self):
        return self.name

    def _file(self, prefix=None):
        prefix = prefix or self._file_prefix
        fname = savename(
            self.config_detection,
            prefix=prefix,
            suffix=self.file_fmt,
            allowedtypes=(str, timedelta, dict, Callable),
            expand=["detect_kwargs"],
        )
        return self.file_path / fname

    def get_event(self, index: int):
        return select_row(self.events, index)

    def get_event_data(
        self,
        event,
        start_col="t_us",
        end_col="t_ds",
        offset=timedelta(seconds=1),
        **kwargs,
    ):
        start = event[start_col] - offset
        end = event[end_col] + offset

        _data = self.data.filter(pl.col("time").is_between(start, end))
        return df2ts(_data, self.mag_meta.B_cols)

# %% ../../notebooks/10_datasets.ipynb 6
class IDsDataset(IdsEvents):
    """Extend the IdsEvents class to handle plasma and temperature data."""

    data: pl.LazyFrame = Field(default=None, alias="mag_data")

    plasma_data: pl.LazyFrame = None
    plasma_meta: PlasmaDataset = PlasmaDataset()

    ion_temp_data: pl.LazyFrame = None
    ion_temp_meta: TempDataset = TempDataset()
    e_temp_data: pl.LazyFrame = None
    e_temp_meta: TempDataset = TempDataset()

    @property
    def config_updates(self):
        return dict(
            plasma_data=self.plasma_data,
            plasma_meta=self.plasma_meta,
            ion_temp_data=self.ion_temp_data,
            e_temp_data=self.e_temp_data,
        )

    def produce_or_load(self, file=None, force=False, **kwargs):
        file = file or self._file(prefix=self._file_prefix + "_updated")
        events, _ = super().produce_or_load(force=force, **kwargs)
        config = self.config_updates | dict(events=events) | kwargs
        return produce_or_load_file(
            update_events, config=config, file=file, force=force
        )

    def standardize(self):
        self.plasma_data = standardize_plasma_data(self.plasma_data, self.plasma_meta)
        return self

    def plot(self, type="overview", event=None, index=None, **kwargs):
        event = event or self.get_event(index)
        if type == "overview":
            return self.overview_plot(event, **kwargs)
