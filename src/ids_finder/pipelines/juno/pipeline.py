# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../notebooks/01_juno.ipynb.

# %% auto 0
__all__ = ['time_resolutions', 'process_jno_index', 'create_jno_index_pipeline', 'download_juno_data', 'preprocess_jno',
           'create_jno_data_pipeline', 'create_pipeline']

# %% ../../../../notebooks/01_juno.ipynb 7
from kedro.pipeline import Pipeline, pipeline, node

from ...core import extract_features
    

# %% ../../../../notebooks/01_juno.ipynb 16
import pandas
import pdpipe as pdp

# %% ../../../../notebooks/01_juno.ipynb 17
def process_jno_index(df: pandas.DataFrame):
    
    _index_time_format = "%Y-%jT%H:%M:%S.%f"
    
    df.columns = df.columns.str.replace(" ", "")
    jno_index_pipeline = pdp.PdPipeline(
        [
            pdp.ColDrop(["PRODUCT_ID", "CR_DATE", "PRODUCT_LABEL_MD5CHECKSUM"]),
            pdp.ApplyByCols("SID", str.rstrip),
            pdp.ApplyByCols("FILE_SPECIFICATION_NAME", str.rstrip),
            pdp.ColByFrameFunc(
                "START_TIME",
                lambda df: pandas.to_datetime(df["START_TIME"], format=_index_time_format),
            ),
            pdp.ColByFrameFunc(
                "STOP_TIME",
                lambda df: pandas.to_datetime(df["STOP_TIME"], format=_index_time_format),
            ),
            # pdp.ApplyByCols(['START_TIME', 'STOP_TIME'], pandas.to_datetime, format=_index_time_format), # NOTE: This is slow
        ]
    )
    
    return jno_index_pipeline(df)


# %% ../../../../notebooks/01_juno.ipynb 19
from kedro.pipeline import pipeline, node

# %% ../../../../notebooks/01_juno.ipynb 20
def create_jno_index_pipeline():
    jno_index_pipeline = pipeline([
        node(process_jno_index, inputs="raw_JNO_SS_index", outputs="JNO_SS_index"),
        node(process_jno_index, inputs="raw_JNO_J_index", outputs="JNO_J_index"),
        node(lambda x1, x2: pandas.concat([x1, x2]), inputs=["JNO_SS_index", "JNO_J_index"], outputs="JNO_index")
    ])
    return jno_index_pipeline

# %% ../../../../notebooks/01_juno.ipynb 26
import pooch
from pooch import Unzip

time_resolutions = ['1sec', '1min']

def download_juno_data(time_resolution: str = 'sec'):
    base_url = 'https://pds-ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI/JNO-SS-3-FGM-CAL-V1.0/DATA/CRUISE/SE'
    pooch.retrieve(
        url=f"{base_url}/{time_resolution.upper()}",
        known_hash=None,
        path = "../data/01_raw/",
        processor=Unzip(extract_dir=f"jno_ss_se_{time_resolution}")
    )
    

# %% ../../../../notebooks/01_juno.ipynb 27
import polars as pl
import pandas    

# %% ../../../../notebooks/01_juno.ipynb 29
from ...utils.basic import partition_data_by_year, concat_partitions

# %% ../../../../notebooks/01_juno.ipynb 30
def preprocess_jno(partitioned_input) -> pl.DataFrame:
    """Preprocess the jno dataset: Cleaning column names, parsing dates and dropping completely null columns are other 'transformations' commonly performed at this stage.

    Args:
        df: Input DataFrame.

    Returns:
        Preprocessed DataFrame.
    """

    df = concat_partitions(partitioned_input)
    df_pl = (
        pl.DataFrame(df)
        .lazy()
        .with_columns(time=pl.col("SAMPLE UTC").str.to_datetime("%Y %j %H %M %S %f"))
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE"])
        .sort("time")
        .collect()
    )
    return df_pl

# %% ../../../../notebooks/01_juno.ipynb 32
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline


def create_jno_data_pipeline():
    jno_data_pipeline = pipeline(
        [
            node(
                download_juno_data,
                inputs=None,
                outputs="raw_jno_ss_se_1sec",
                name="download_JUNO_data_1sec",
            ),
            node(
                preprocess_jno,
                inputs="raw_jno_ss_se_1sec",
                outputs="inter_jno_ss_se_1s",
                name="preprocess_JUNO_1s",
            ),
            node(
                partition_data_by_year,
                inputs="inter_jno_ss_se_1s",
                outputs="primary_jno_ss_se_1s",
                name="partition_JUNO_1s",
            ),
            node(
                extract_features,
                inputs=["primary.jno_ss_se_1s", "params:tau", "params:jno_1s_params"],
                outputs="candidates_jno_ss_se_1s",
                name="extract_JUNO_features",
            ),
        ]
    )
    return jno_data_pipeline

# %% ../../../../notebooks/01_juno.ipynb 33
def create_pipeline(**kwargs) -> Pipeline:
    return create_jno_data_pipeline() + create_jno_index_pipeline()
