# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../notebooks/10_juno_report.ipynb.

# %% auto 0
__all__ = ['j_factor', 'vector_project', 'vector_project_pl', 'compute_inertial_length', 'unitize', 'process_jno_candidates',
           'create_pipeline']

# %% ../../../../notebooks/10_juno_report.ipynb 2
from loguru import logger
from typing import Union, Collection, Callable, Optional, Tuple
from typing import Any, Dict

import numpy as np
import polars as pl
import pandas

# %% ../../../../notebooks/10_juno_report.ipynb 5
from ...utils.basic import df2ts, pl_norm
import xarray as xr
from xarray_einstats import linalg

def vector_project(v1,v2, dim="v_dim"):
    return xr.dot(v1 , v2, dims=dim) / linalg.norm(v2, dims=dim)

def vector_project_pl(df: pl.DataFrame, v1_cols, v2_cols, name=None):
    
    v1 = df2ts(df, v1_cols).assign_coords(v_dim=["r","t","n"])
    v2 = df2ts(df, v2_cols).assign_coords(v_dim=["r","t","n"]) 
    result = vector_project(v1, v2, dim="v_dim")
    
    return df.with_columns(
        pl.Series(result.data).alias(name or "v_proj")
    )

# %% ../../../../notebooks/10_juno_report.ipynb 7
import astropy.units as u
from astropy.constants import mu0
from plasmapy.formulary.lengths import inertial_length

# %% ../../../../notebooks/10_juno_report.ipynb 8
def compute_inertial_length(df: pl.DataFrame):
    
    result = inertial_length(df['rho'].to_numpy() * u.cm**(-3), 'H+').to(u.km)
    
    return df.with_columns(
        ion_inertial_length = pl.Series(result.value)
    )

j_factor = ((u.nT/u.s) * (1 / mu0 / (u.km/u.s) )).si.value

def unitize(df: pl.DataFrame):
    """unitize the columns in the dataframe with
    """

    return df.with_columns(
        j0 = pl.col('j0') * j_factor,
    )
    
def process_jno_candidates(jno_candidates: pl.DataFrame, jno_mswim2d_rtn: pl.DataFrame):
    u_vec_cols = ["ur", "ut", "un"]  # velocity vector
    l_vec_cols = ["Vl_x", "Vl_y", "Vl_z"]  # major eigenvector

    jno_updated_candidates = jno_candidates.sort("time").join_asof(
        jno_mswim2d_rtn.sort("time"), on="time"
    )

    df = (
        jno_updated_candidates.with_columns(
            u=pl_norm(u_vec_cols),
            duration=pl.col("d_tstop") - pl.col("d_tstart"),
        )
        .pipe(vector_project_pl, u_vec_cols, l_vec_cols, name="u_l")
        .with_columns(u_mn=(pl.col("u") ** 2 - pl.col("u_l") ** 2).sqrt())
        .with_columns(
            L_mn=pl.col("u_mn") * pl.col("duration").dt.nanoseconds() / 1e9,
            j0=pl.col("d_star") / pl.col("u_mn"),
        )
        .pipe(compute_inertial_length)
        .pipe(unitize)
        .with_columns(L_mn_norm=pl.col("L_mn") / pl.col("ion_inertial_length"))
    )

    return df

# %% ../../../../notebooks/10_juno_report.ipynb 11
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

def create_pipeline(**kwargs) -> Pipeline:
    pipeline([
        node(process_jno_candidates, inputs=["candidates.jno_ss_se_1s", "model.jno_mswim2d_rtn"], outputs="candidates.p.jno_ss_se_1s")
    ])
        
