# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../../notebooks/01_model.ipynb.

# %% auto 0
__all__ = ['bcols_hgi', 'bcols_rtn', 'vcols_hgi', 'vcols_rtn', 'hgi2rtn', 'process_model', 'create_pipeline']

# %% ../../../../notebooks/01_model.ipynb 5
from loguru import logger
from typing import Union, Collection, Callable, Optional, Tuple
from typing import Any, Dict


import numpy as np
import polars as pl
import pandas

# %% ../../../../notebooks/01_model.ipynb 8
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline


# %% ../../../../notebooks/01_model.ipynb 14
bcols_hgi = ['bx', 'by', 'bz']
bcols_rtn = ['br', 'bt', 'bn']
vcols_hgi = ['ux', 'uy', 'uz']
vcols_rtn = ['ur', 'ut', 'un']


def hgi2rtn(df: pl.LazyFrame | pl.DataFrame):
    """Transform coordinates from HGI to RTN"""

    # Compute RTN components for B
    br = pl.col("bx") * pl.col("phi_rad").cos() + pl.col("by") * pl.col("phi_rad").sin()
    bt = -pl.col("bx") * pl.col("phi_rad").sin() + pl.col("by") * pl.col("phi_rad").cos()
    bn = pl.col("bz")
    
    # Compute RTN components for V
    ur = pl.col("ux") * pl.col("phi_rad").cos() + pl.col("uy") * pl.col("phi_rad").sin()
    ut = -pl.col("ux") * pl.col("phi_rad").sin() + pl.col("uy") * pl.col("phi_rad").cos()
    un = pl.col("uz")

    result = df.with_columns(
        phi_rad=pl.col("phi").radians(),
    ).with_columns(
        br=br,
        bt=bt,
        bn=bn,
        ur=ur,
        ut=ut,
        un=un
    ).drop(["phi", "phi_rad"] + bcols_hgi + vcols_hgi)
    return result


def process_model(df: pandas.DataFrame) -> pl.DataFrame:
    """Process the model data"""
    df_pl = pl.from_pandas(df).lazy()

    return (
        df_pl
        .with_columns(
            time=pl.col("Date_Time").str.to_datetime(time_unit="ns"),
        )
        .drop(["Date_Time", "hour"])
        .sort("time")
        .collect()
    )

# %% ../../../../notebooks/01_model.ipynb 18
def create_pipeline(**kwargs) -> Pipeline:
    nodes = [
        node(process_model, inputs="raw_jno_mswim2d", outputs="processed_jno_mswim2d"),
        node(hgi2rtn, inputs="processed_jno_mswim2d", outputs="jno_mswim2d_rtn"),
    ]
    return pipeline(nodes, namespace="model")
