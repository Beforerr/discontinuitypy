# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/wind/mag.ipynb.

# %% auto 0
__all__ = ['download_data', 'load_data', 'preprocess_data', 'create_pipeline']

# %% ../../../notebooks/missions/wind/mag.ipynb 1
import polars as pl

from ...utils.cdf import cdf2pl
from ...utils.basic import pmap
from ...utils.polars import create_partitions
from ..default.data_mag import create_pipeline_template

import pyspedas

from functools import partial

# %% ../../../notebooks/missions/wind/mag.ipynb 4
def download_data(start: str, end: str, datatype="h4-rtn") -> list[str]:
    trange = [start, end]
    return pyspedas.wind.mfi(trange, datatype=datatype, downloadonly=True)

# %% ../../../notebooks/missions/wind/mag.ipynb 5
def load_data(
    start: str = None,
    end: str = None,
    datatype="h4-rtn",
    var_names="BRTN",
):
    files = download_data(start=start, end=end, datatype=datatype)
    load_func = partial(cdf2pl, var_names=var_names)
    
    return pl.concat(files | pmap(load_func))

# %% ../../../notebooks/missions/wind/mag.ipynb 7
def preprocess_data(
    raw_data,
    var_names="BRTN",
):
    """
    Preprocess the raw dataset (only minor transformations)
    - Applying naming conventions for columns
    """
    
    load_func = partial(cdf2pl, var_names=var_names)
    return create_partitions(raw_data, load_func)

# %% ../../../notebooks/missions/wind/mag.ipynb 9
from ..default.data_mag import process_data
from ... import PARAMS

# %% ../../../notebooks/missions/wind/mag.ipynb 10
def create_pipeline(sat_id="Wind", source="MAG", params=None, **kwargs):
    # if params is None:
        # params = PARAMS[sat_id][source]
    return create_pipeline_template(
        sat_id=sat_id,
        source=source,
        # params=params,
        load_data_fn=download_data,
        preprocess_data_fn=preprocess_data,
        process_data_fn=process_data,
        **kwargs,
    )
