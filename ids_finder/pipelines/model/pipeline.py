# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/01_model.ipynb.

# %% auto 0
__all__ = ['bcols_hgi', 'bcols_rtn', 'vcols_hgi', 'vcols_rtn', 'columns_name_mapping', 'get_state_data', 'hgi2rtn',
           'processs_state_data', 'create_state_data_pipeline', 'create_pipeline', 'create_jno_data_pipeline']

# %% ../../../notebooks/01_model.ipynb 4
from loguru import logger
from typing import Union, Collection, Callable, Optional, Tuple
from typing import Any, Dict


import numpy as np
import polars as pl
import pandas

# %% ../../../notebooks/01_model.ipynb 6
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline


# %% ../../../notebooks/01_model.ipynb 10
def get_state_data(tstart=None, tend=None, raw_data=None, columns=None, **kwargs):
    """Get the state data with proper column names and types in RTN coordinates."""
    df = (
        pl.from_pandas(raw_data)
        .lazy()
        .with_columns(
            time=pl.col("Date_Time").str.to_datetime(time_unit="ns"),
        )
        .sort("time")
        .collect()
        .drop(["Date_Time", "hour"])
    )
    return df

# %% ../../../notebooks/01_model.ipynb 11
bcols_hgi = ["bx", "by", "bz"]
bcols_rtn = ["br", "bt", "bn"]
vcols_hgi = ["ux", "uy", "uz"]
vcols_rtn = ["ur", "ut", "un"]


def hgi2rtn(df: pl.LazyFrame | pl.DataFrame):
    """Transform coordinates from HGI to RTN"""

    # Compute RTN components for B
    br = pl.col("bx") * pl.col("phi_rad").cos() + pl.col("by") * pl.col("phi_rad").sin()
    bt = (
        -pl.col("bx") * pl.col("phi_rad").sin() + pl.col("by") * pl.col("phi_rad").cos()
    )
    bn = pl.col("bz")

    # Compute RTN components for solar wind velocity
    ur = pl.col("ux") * pl.col("phi_rad").cos() + pl.col("uy") * pl.col("phi_rad").sin()
    ut = (
        -pl.col("ux") * pl.col("phi_rad").sin() + pl.col("uy") * pl.col("phi_rad").cos()
    )
    un = pl.col("uz")
    u = (pl.col("ux") ** 2 + pl.col("uy") ** 2 + pl.col("uz") ** 2).sqrt()

    result = (
        df.with_columns(
            phi_rad=pl.col("phi").radians(),
        )
        .with_columns(br=br, bt=bt, bn=bn, ur=ur, ut=ut, un=un, u=u)
        .drop(["phi", "phi_rad"] + bcols_hgi + vcols_hgi)
    )
    return result


columns_name_mapping = {
    'r': 'radial_distance',
    "ur": "sw_vel_r",
    "un": "sw_vel_n",
    "ut": "sw_vel_t",
    'u': "sw_speed",
    "br": "model_b_r",
    "bn": "model_b_n",
    "bt": "model_b_t",
    "Ti": "sw_temperature",
    "rho": "sw_density",
}


def processs_state_data(df: pl.DataFrame) -> pl.DataFrame:
    return df.pipe(hgi2rtn).rename(columns_name_mapping)

# %% ../../../notebooks/01_model.ipynb 14
def create_state_data_pipeline(sat_id, **kwargs) -> Pipeline:
    node_get_state_data = node(
        get_state_data,
        inputs={
            "tstart": "params:start_date",
            "tend": "params:end_date",
            "raw_data": "raw_state",
        },
        outputs="inter_state_rtn_1h",
        name=f"get_{sat_id.upper()}_state_data",
    )

    node_processs_state_data = node(
        processs_state_data,
        inputs="inter_state_rtn_1h",
        outputs="primary_state_rtn_1h",
        name=f"process_{sat_id.upper()}_state_data",
    )

    nodes = [node_get_state_data, node_processs_state_data]
    pipelines = pipeline(
        nodes,
        namespace=sat_id,
        parameters={
            "params:start_date": "params:jno_start_date",
            "params:end_date": "params:jno_end_date",
        },
    )

    return pipelines

# %% ../../../notebooks/01_model.ipynb 15
def create_pipeline(**kwargs) -> Pipeline:
    sat_id = "jno"
    return create_state_data_pipeline(sat_id)

# %% ../../../notebooks/01_model.ipynb 19
from ..juno.pipeline import download_juno_data, preprocess_jno

# %% ../../../notebooks/01_model.ipynb 20
def create_jno_data_pipeline(**kwargs) -> Pipeline:
    nodes = [
        node(download_juno_data, inputs=None, outputs="raw_jno_ss_se_1min", name="download_JUNO_data_1min"),
        node(preprocess_jno, inputs="raw_jno_ss_se_1min", outputs="preprocessed_jno_ss_se_1min", name="preprocess_JUNO_node_1min",),
    ]
    return pipeline(nodes, namespace="model")

# %% ../../../notebooks/01_model.ipynb 48
# def create_pipeline(**kwargs) -> Pipeline:
    # return create_jno_model_pipeline(**kwargs) + create_jno_data_pipeline(**kwargs)
