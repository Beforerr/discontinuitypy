# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/themis/index.ipynb.

# %% auto 0
__all__ = ['filter_sw_events', 'create_sw_events_pipeline', 'create_pipeline']

# %% ../../../notebooks/missions/themis/index.ipynb 4
# | code-summary: import all the packages needed for the project
# | output: hide
import polars as pl
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

from .mag import create_pipeline as create_mag_data_pipeline
from .state import create_pipeline as create_state_data_pipeline
from ..default.mission import create_combined_data_pipeline

# %% ../../../notebooks/missions/themis/index.ipynb 10
from ...utils.basic import filter_tranges_df

def filter_sw_events(events: pl.LazyFrame, sw_state: pl.LazyFrame) -> pl.LazyFrame:
    
    start, end = sw_state.select(['start', 'end']).collect()
    sw_events = filter_tranges_df(events.collect(), (start, end))
    
    return sw_events

def create_sw_events_pipeline(
    sat_id,
    tau: int = 60,
    ts_mag: int = 1,
    
):
  
    ts_mag_str = f"ts_{ts_mag}s"
    tau_str = f"tau_{tau}s"
    
    node_filter_sw_events = node(
        filter_sw_events,
        inputs=[
            f"candidates.{sat_id}_{ts_mag_str}_{tau_str}",
            f"{sat_id}.inter_state_sw",
        ],
        outputs=f"events.sw.{sat_id}_{ts_mag_str}_{tau_str}"
        
    )

    nodes = [node_filter_sw_events]
    return pipeline(nodes)

# %% ../../../notebooks/missions/themis/index.ipynb 11
def create_pipeline(
    sat_id="thb",
    tau=60, # time window, in seconds
    ts_state="1h",  # time resolution of state data
    ts_mag = 1, # time resolution of mag data, in seconds
) -> Pipeline:
    return (
        create_mag_data_pipeline()
        + create_state_data_pipeline(sat_id, ts=ts_state)
        + create_combined_data_pipeline(sat_id, tau=tau, ts_mag= ts_mag, ts_state=ts_state)
        + create_sw_events_pipeline(sat_id, tau=tau, ts_mag= ts_mag)
    )
