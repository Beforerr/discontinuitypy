# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/themis/state.ipynb.

# %% auto 0
__all__ = ['load_sw_data', 'preprocess_sw_data', 'create_sw_pipeline', 'create_pipeline']

# %% ../../../notebooks/missions/themis/state.ipynb 1
import polars as pl
import pandas

from kedro.pipeline import node
from kedro.pipeline.modular_pipeline import pipeline

# %% ../../../notebooks/missions/themis/state.ipynb 4
def load_sw_data(raw_data: pandas.DataFrame):
    return pl.from_dataframe(raw_data)

# %% ../../../notebooks/missions/themis/state.ipynb 5
def preprocess_sw_data(
    raw_data: pl.LazyFrame,
) -> pl.LazyFrame:
    """
    - Applying naming conventions for columns
    - Parsing and typing data (like from string to datetime for time columns)
    """

    return raw_data.with_columns(
        # Note: For `polars`, please either specify both hour and minute, or neither.
        pl.concat_str(pl.col("start"), pl.lit(" 00")).str.to_datetime(
            format="%Y %j %H %M"
        ),
        pl.concat_str(pl.col("end"), pl.lit(" 00")).str.to_datetime(
            format="%Y %j %H %M"
        ),
    )

# %% ../../../notebooks/missions/themis/state.ipynb 7
def create_sw_pipeline(sat_id="THB", source="STATE"):
    namespace = f"{sat_id}.{source}"
    node_load_sw_data = node(
        load_sw_data,
        inputs="original_sw_data",
        outputs="raw_data_sw",
        name="load_solar_wind_data",
    )
    node_preprocess_sw_state = node(
        preprocess_sw_data,
        inputs="raw_data_sw",
        outputs="inter_data_sw",
        name="preprocess_solar_wind_data",
    )
    return pipeline(
        [
            node_load_sw_data,
            node_preprocess_sw_state,
        ],
        namespace=namespace,
    )

# %% ../../../notebooks/missions/themis/state.ipynb 8
def create_pipeline(sat_id="THB", source="STATE"):
    return create_sw_pipeline(sat_id=sat_id, source=source)
