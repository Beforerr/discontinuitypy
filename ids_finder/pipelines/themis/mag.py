# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/themis/mag.ipynb.

# %% auto 0
__all__ = ['check_dataype', 'download_data', 'spz2df', 'load_data', 'preprocess_data', 'process_data', 'create_pipeline']

# %% ../../../notebooks/missions/themis/mag.ipynb 1
from datetime import timedelta

import polars as pl

from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

# %% ../../../notebooks/missions/themis/mag.ipynb 4
import speasy as spz
from speasy import SpeasyVariable

# %% ../../../notebooks/missions/themis/mag.ipynb 5
def check_dataype(ts):
    ts = timedelta(seconds=ts)
    fgs_ts = timedelta(seconds=3)
    fgl_ts = timedelta(seconds=0.1)

    if ts > fgs_ts:
        datatype = "fgs"
    elif ts > fgl_ts:
        datatype = "fgl"
    else:
        datatype = "fgh"
    return datatype

# %% ../../../notebooks/missions/themis/mag.ipynb 6
def download_data(
    trange, probe: str = "b", datatype="fgs", coord="gse"
) -> SpeasyVariable:
    match probe:
        case "b":
            sat = "thb"

    product = f"cda/{sat.upper()}_L2_FGM/{sat}_{datatype}_{coord}"
    data = spz.get_data(product, trange, disable_proxy=True)

    return data


def spz2df(raw_data: SpeasyVariable):
    return pl.from_dataframe(raw_data.to_dataframe().reset_index()).rename(
        {"index": "time"}
    )


def load_data(
    start,
    end,
    datatype=None,
    ts=None,  # time resolution
    probe: str = "b",
    coord="gse",
):
    trange = [start, end]

    data = download_data(trange, probe, datatype, coord)
    return spz2df(data).lazy()

# %% ../../../notebooks/missions/themis/mag.ipynb 8
from ...utils.basic import resample

# %% ../../../notebooks/missions/themis/mag.ipynb 9
def preprocess_data(
    raw_data: pl.LazyFrame,
    datatype: str = None,
    coord: str = "gse",
) -> pl.LazyFrame:
    """
    Preprocess the raw dataset (only minor transformations)

    - Applying naming conventions for columns
    - Dropping duplicate time
    - Changing storing format to `parquet`

    """

    datatype = datatype.upper()
    name_mapping = {
        f"Bx {datatype}-D": "B_x",
        f"By {datatype}-D": "B_y",
        f"Bz {datatype}-D": "B_z",
    }

    return raw_data.sort("time").unique("time").rename(name_mapping)

# %% ../../../notebooks/missions/themis/mag.ipynb 11
from ...utils.basic import partition_data_by_year

# %% ../../../notebooks/missions/themis/mag.ipynb 12
def process_data(
    raw_data: pl.LazyFrame,
    ts: int = None,  # time resolution
) -> pl.DataFrame | dict[str, pl.DataFrame]:
    """
    Partitioning data, for the sake of memory
    """

    every = timedelta(seconds=ts)
    period = 2 * every

    return raw_data.pipe(resample, every=every, period=period).pipe(
        partition_data_by_year
    )

# %% ../../../notebooks/missions/themis/mag.ipynb 14
from ...core.pipeline import extract_features
from ..default.data_mag import create_pipeline_template


def create_pipeline(sat_id="THB", source="MAG"):
    return create_pipeline_template(
        sat_id=sat_id,
        source=source,
        load_data_fn=load_data,
        preprocess_data_fn=preprocess_data,
        process_data_fn=process_data,
        extract_features_fn=extract_features,
    )
