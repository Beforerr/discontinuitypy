# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/pipelines/2_data_mag.ipynb.

# %% auto 0
__all__ = ['create_pipeline_template']

# %% ../../../notebooks/pipelines/2_data_mag.ipynb 1
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

from ... import PARAMS
from ...core.pipeline import extract_features
from ids_finder.pipelines.default.data import (
    create_pipeline_template as create_pipeline_template_base,
)

from typing import Callable, Optional

# %% ../../../notebooks/pipelines/2_data_mag.ipynb 3
def create_pipeline_template(
    sat_id: str,  # satellite id, used for namespace
    source: str,  # source data, like "mag" or "plasma"
    extract_features_fn: Optional[Callable] = extract_features,
    params: Optional[dict] = PARAMS,
    **kwargs,
) -> Pipeline:
    namespace = f"{sat_id}.{source}"

    tau = params["tau"]
    ts = params[sat_id][source]["time_resolution"]
    tau_str = f"tau_{tau}s"
    ts_str = f"ts_{ts}s"

    node_extract_features = node(
        extract_features_fn,
        inputs=[
            f"primary_data_{ts_str}",
            "params:tau",
            "params:time_resolution",
            "params:bcols",
        ],
        outputs=f"feature_{ts_str}_{tau_str}",
        name="extract_features",
    )

    nodes = [node_extract_features]

    pipelines = pipeline(
        nodes,
        namespace=namespace,
        parameters={"params:tau": "params:tau"},
    )

    base_pipelines = create_pipeline_template_base(
        sat_id=sat_id, source=source, params=params, **kwargs
    )
    return base_pipelines + pipelines
