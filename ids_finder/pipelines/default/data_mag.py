# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/pipelines/2_data_mag.ipynb.

# %% auto 0
__all__ = ['process_data', 'create_extra_pipeline', 'create_pipeline_template']

# %% ../../../notebooks/pipelines/2_data_mag.ipynb 1
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

from ... import PARAMS
from ...core.pipeline import extract_features
from ids_finder.pipelines.default.data import (
    create_pipeline_template as create_pipeline_template_base,
)

from typing import Callable, Optional, Dict

# %% ../../../notebooks/pipelines/2_data_mag.ipynb 4
from ...utils.basic import resample, partition_data_by_time
from datetime import timedelta
import polars as pl

def process_data(
    raw_data: Dict[str, Callable[..., pl.LazyFrame]],
    ts=None,  # time resolution, in seconds, optional
    partition_time_method='year',  # partition time resolution, in seconds, optional
):
    if ts is not None and ts > 0:
        every = timedelta(seconds=ts)
        items = (resample(func(), every=every) for func in raw_data.values())
    else:
        items = (func() for func in raw_data.values())
    return pl.concat(items).unique("time").pipe(partition_data_by_time, method=partition_time_method)

# %% ../../../notebooks/pipelines/2_data_mag.ipynb 5
def create_extra_pipeline(
    sat_id: str,  # satellite id, used for namespace
    source: str,  # source data, like "mag" or "plasma"
    extract_features_fn: Optional[Callable] = extract_features,
    params: Optional[dict] = PARAMS,
    **kwargs,
):
    namespace = f"{sat_id}.{source}"

    tau = params["tau"]
    ts = params[sat_id][source].get("time_resolution", 0)
    tau_str = f"tau_{tau}s"
    ts_str = f"ts_{ts}s"

    node_extract_features = node(
        extract_features_fn,
        inputs=[
            f"primary_data_{ts_str}",
            "params:tau",
            "params:time_resolution",
            "params:bcols",
        ],
        outputs=f"feature_{ts_str}_{tau_str}",
        name="extract_features",
    )

    nodes = [node_extract_features]

    return pipeline(
        nodes,
        namespace=namespace,
        parameters={"params:tau": "params:tau"},
    )


def create_pipeline_template(
    sat_id: str,  # satellite id, used for namespace
    source: str,  # source data, like "mag" or "plasma"
    extract_features_fn: Optional[Callable] = extract_features,
    params: Optional[dict] = PARAMS,
    **kwargs,
) -> Pipeline:
    extra_pipelines = create_extra_pipeline(
        sat_id=sat_id,
        source=source,
        extract_features_fn=extract_features_fn,
        params=params,
        **kwargs,
    )

    base_pipelines = create_pipeline_template_base(
        sat_id=sat_id, source=source, params=params, **kwargs
    )
    return base_pipelines + extra_pipelines
