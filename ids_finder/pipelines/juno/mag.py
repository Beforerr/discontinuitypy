# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/juno/mag.ipynb.

# %% auto 0
__all__ = ['JunoPhases', 'JunoFGMCoords', 'JunoFGMTimeResolutions', 'download_data', 'load_data', 'preprocess_data',
           'process_data', 'create_pipeline', 'process_jno_index', 'create_jno_index_pipeline']

# %% ../../../notebooks/missions/juno/mag.ipynb 1
from datetime import timedelta
import polars as pl

from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

from ...utils.pds import pds_download
from ...utils.lbl import load_lbl

# %% ../../../notebooks/missions/juno/mag.ipynb 5
from ... import ROOT_DIR
from ...utils.basic import concat_partitions
from pipe import select, filter
from typing import Literal


# %% ../../../notebooks/missions/juno/mag.ipynb 6
#| code-summary: type definitions
JunoPhases = Literal["CRUISE", "JUPITER"]
JunoFGMCoords = Literal['SE', 'SS', 'PL']
JunoFGMTimeResolutions = Literal["1SEC", "1MIN"]

# %% ../../../notebooks/missions/juno/mag.ipynb 7
def download_data(
    start=None,
    end=None,
    phase: JunoPhases = "CRUISE",
    coord: JunoFGMCoords = "SE",
    datatype: JunoFGMTimeResolutions = "1SEC",  # time resolution
) -> list[str]:
    return pds_download(
        mission="Juno",
        instrument="FGM",
        dataset=phase,
        coord=coord,
        datatype=datatype,
        path=ROOT_DIR / "data/01_raw/",
    )


def load_data(
    start,
    end,
    datatype: str = "1SEC",  # time resolution
) -> pl.DataFrame:
    files = download_data(start, end, datatype)

    data = pl.concat(
        files
        | filter(lambda x: x.endswith(".lbl"))
        | select(load_lbl)
        | select(pl.from_dataframe)
    )

    return data

# %% ../../../notebooks/missions/juno/mag.ipynb 9
from ...utils.basic import concat_partitions

# %% ../../../notebooks/missions/juno/mag.ipynb 10
def preprocess_data(raw_data: pl.DataFrame) -> pl.DataFrame:
    """
    Preprocess the raw dataset (only minor transformations)

    - Applying naming conventions for columns
    - Parsing and typing data
    - Changing storing format (from `lbl` to `parquet`)
    - Dropping useless columns
    """

    df_pl = (
        raw_data.lazy()
        .with_columns(time=pl.col("SAMPLE UTC").str.to_datetime("%Y %j %H %M %S %f"))
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE"])
        .sort("time")
        .collect()
    )
    return df_pl

# %% ../../../notebooks/missions/juno/mag.ipynb 12
from ...utils.basic import partition_data_by_year

# %% ../../../notebooks/missions/juno/mag.ipynb 13
def process_data(
    raw_data: pl.DataFrame,
    ts: str = None,  # time resolution
    coord: str = None,
) -> pl.DataFrame | dict[str, pl.DataFrame]:
    """
    Partitioning data, for the sake of memory
    """
    return partition_data_by_year(raw_data)

# %% ../../../notebooks/missions/juno/mag.ipynb 15
from ...core.pipeline import extract_features
from ..default.data_mag import create_pipeline_template


def create_pipeline(sat_id="JNO", source="MAG"):
    return create_pipeline_template(
        sat_id=sat_id,
        source=source,
        load_data_fn=load_data,
        preprocess_data_fn=preprocess_data,
        process_data_fn=process_data,
        extract_features_fn=extract_features,
    )

# %% ../../../notebooks/missions/juno/mag.ipynb 16
def create_pipeline(
    sat_id,
    ts: str = "1s",  # time resolution,
    tau: str = "60s",  # time window
    **kwargs,
) -> Pipeline:

    node_download_data = node(
        load_data,
        inputs=dict(
            start="params:start_date",
            end="params:end_date",
        ),
        outputs=f"raw_mag_files_{ts}",
        name=f"download_{sat_id.upper()}_magnetic_field_data",
    )

    node_preprocess_data = node(
        preprocess_data,
        inputs=dict(
            raw_data=f"raw_mag_{ts}",
        ),
        outputs=f"inter_mag_{ts}",
        name=f"preprocess_{sat_id.upper()}_magnetic_field_data",
    )
    
    node_process_data = node(
        process_data,
        inputs=f"inter_mag_{ts}",
        outputs=f"primary_mag_rtn_{ts}",
        name=f"process_{sat_id.upper()}_magnetic_field_data",
    )
    
    node_extract_features = node(
        extract_features,
        inputs=[f"primary_mag_rtn_{ts}", "params:tau", "params:extract_params"],
        outputs=f"feature_tau_{tau}",
        name=f"extract_{sat_id}_features",
    )

    nodes = [
        node_download_data,
        node_preprocess_data,
        node_process_data,
        node_extract_features,
    ]

    pipelines = pipeline(
        nodes,
        namespace=sat_id,
        parameters={
            "params:tau": "params:tau",
            "params:extract_params": "params:jno_1s_params",
            "params:start_date": "params:jno_start_date",
            "params:end_date": "params:jno_end_date",
        },
    )
    return pipelines

# %% ../../../notebooks/missions/juno/mag.ipynb 21
import pandas
import pdpipe as pdp

# %% ../../../notebooks/missions/juno/mag.ipynb 22
def process_jno_index(df: pandas.DataFrame):
    _index_time_format = "%Y-%jT%H:%M:%S.%f"

    df.columns = df.columns.str.replace(" ", "")
    jno_index_pipeline = pdp.PdPipeline(
        [
            pdp.ColDrop(["PRODUCT_ID", "CR_DATE", "PRODUCT_LABEL_MD5CHECKSUM"]),
            pdp.ApplyByCols("SID", str.rstrip),
            pdp.ApplyByCols("FILE_SPECIFICATION_NAME", str.rstrip),
            pdp.ColByFrameFunc(
                "START_TIME",
                lambda df: pandas.to_datetime(
                    df["START_TIME"], format=_index_time_format
                ),
            ),
            pdp.ColByFrameFunc(
                "STOP_TIME",
                lambda df: pandas.to_datetime(
                    df["STOP_TIME"], format=_index_time_format
                ),
            ),
            # pdp.ApplyByCols(['START_TIME', 'STOP_TIME'], pandas.to_datetime, format=_index_time_format), # NOTE: This is slow
        ]
    )

    return jno_index_pipeline(df)

# %% ../../../notebooks/missions/juno/mag.ipynb 24
from kedro.pipeline import pipeline, node

# %% ../../../notebooks/missions/juno/mag.ipynb 25
def create_jno_index_pipeline():
    jno_index_pipeline = pipeline(
        [
            node(process_jno_index, inputs="raw_JNO_SS_index", outputs="JNO_SS_index"),
            node(process_jno_index, inputs="raw_JNO_J_index", outputs="JNO_J_index"),
            node(
                lambda x1, x2: pandas.concat([x1, x2]),
                inputs=["JNO_SS_index", "JNO_J_index"],
                outputs="JNO_index",
            ),
        ]
    )
    return jno_index_pipeline
