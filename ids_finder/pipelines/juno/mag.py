# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/juno/mag.ipynb.

# %% auto 0
__all__ = ['time_resolutions', 'download_data', 'load_data', 'preprocess_data', 'process_data', 'create_pipeline',
           'process_jno_index', 'create_jno_index_pipeline']

# %% ../../../notebooks/missions/juno/mag.ipynb 1
from datetime import timedelta
import polars as pl

from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

# %% ../../../notebooks/missions/juno/mag.ipynb 5
import pooch
from pooch import Unzip
from ...utils.basic import load_lbl, concat_partitions
from pipe import select, filter

# %% ../../../notebooks/missions/juno/mag.ipynb 6
time_resolutions = ["1sec", "1min"]

def download_data(
    start=None,
    end=None,
    datatype: str = "1sec",  # time resolution
) -> list[str]:
    base_url = "https://pds-ppi.igpp.ucla.edu/ditdos/download?id=pds://PPI/JNO-SS-3-FGM-CAL-V1.0/DATA/CRUISE/SE"
    files = pooch.retrieve(
        url=f"{base_url}/{datatype.upper()}",
        known_hash=None,
        path="../data/01_raw/",
        processor=Unzip(extract_dir=f"jno_ss_se_{datatype}"),
    )
    return files


def load_data(
    start,
    end,
    datatype: str = "1sec",  # time resolution
) -> pl.DataFrame:
    files = download_data(start, end, datatype)

    data = pl.concat(
        files
        | filter(lambda x: x.endswith(".lbl"))
        | select(load_lbl)
        | select(pl.from_dataframe)
    )

    return data

# %% ../../../notebooks/missions/juno/mag.ipynb 8
from ...utils.basic import concat_partitions

# %% ../../../notebooks/missions/juno/mag.ipynb 9
def preprocess_data(raw_data: pl.DataFrame) -> pl.DataFrame:
    """
    Preprocess the raw dataset (only minor transformations)

    - Applying naming conventions for columns
    - Parsing and typing data
    - Changing storing format (from `lbl` to `parquet`)
    - Dropping useless columns
    """

    df_pl = (
        raw_data
        .lazy()
        .with_columns(time=pl.col("SAMPLE UTC").str.to_datetime("%Y %j %H %M %S %f"))
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE"])
        .sort("time")
        .collect()
    )
    return df_pl

# %% ../../../notebooks/missions/juno/mag.ipynb 11
from ...utils.basic import partition_data_by_year

# %% ../../../notebooks/missions/juno/mag.ipynb 12
def process_data(
    raw_data: pl.DataFrame,
    ts: str = None,  # time resolution
    coord: str = None,
) -> pl.DataFrame | dict[str, pl.DataFrame]:
    """
    Partitioning data, for the sake of memory
    """
    return partition_data_by_year(raw_data)

# %% ../../../notebooks/missions/juno/mag.ipynb 14
from ...core.pipeline import extract_features
from ..default.data_mag import create_pipeline_template


def create_pipeline(sat_id="JNO", source="MAG"):
    return create_pipeline_template(
        sat_id=sat_id,
        source=source,
        load_data_fn=load_data,
        preprocess_data_fn=preprocess_data,
        process_data_fn=process_data,
        extract_features_fn=extract_features,
    )

# %% ../../../notebooks/missions/juno/mag.ipynb 20
import pandas
import pdpipe as pdp

# %% ../../../notebooks/missions/juno/mag.ipynb 21
def process_jno_index(df: pandas.DataFrame):
    
    _index_time_format = "%Y-%jT%H:%M:%S.%f"
    
    df.columns = df.columns.str.replace(" ", "")
    jno_index_pipeline = pdp.PdPipeline(
        [
            pdp.ColDrop(["PRODUCT_ID", "CR_DATE", "PRODUCT_LABEL_MD5CHECKSUM"]),
            pdp.ApplyByCols("SID", str.rstrip),
            pdp.ApplyByCols("FILE_SPECIFICATION_NAME", str.rstrip),
            pdp.ColByFrameFunc(
                "START_TIME",
                lambda df: pandas.to_datetime(df["START_TIME"], format=_index_time_format),
            ),
            pdp.ColByFrameFunc(
                "STOP_TIME",
                lambda df: pandas.to_datetime(df["STOP_TIME"], format=_index_time_format),
            ),
            # pdp.ApplyByCols(['START_TIME', 'STOP_TIME'], pandas.to_datetime, format=_index_time_format), # NOTE: This is slow
        ]
    )
    
    return jno_index_pipeline(df)


# %% ../../../notebooks/missions/juno/mag.ipynb 23
from kedro.pipeline import pipeline, node

# %% ../../../notebooks/missions/juno/mag.ipynb 24
def create_jno_index_pipeline():
    jno_index_pipeline = pipeline([
        node(process_jno_index, inputs="raw_JNO_SS_index", outputs="JNO_SS_index"),
        node(process_jno_index, inputs="raw_JNO_J_index", outputs="JNO_J_index"),
        node(lambda x1, x2: pandas.concat([x1, x2]), inputs=["JNO_SS_index", "JNO_J_index"], outputs="JNO_index")
    ])
    return jno_index_pipeline
