# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/juno/mag.ipynb.

# %% auto 0
__all__ = ['JunoPhases', 'JunoFGMCoords', 'JunoFGMTimeResolutions', 'download_data', 'parse_fp', 'load_data', 'preprocess_data',
           'process_data', 'create_pipeline', 'process_jno_index', 'create_jno_index_pipeline']

# %% ../../../notebooks/missions/juno/mag.ipynb 1
from datetime import datetime

import polars as pl
import pandas as pd

from ... import ROOT_DIR
from ...utils.pds import pds_download
from ...utils.lbl import load_lbl
from ...utils.basic import partition_data_by_year
from ...utils.polars import create_partitions
from ..default.data_mag import create_pipeline_template


from pipe import select, filter

from typing import Literal

# %% ../../../notebooks/missions/juno/mag.ipynb 5
#| code-summary: type definitions
JunoPhases = Literal["CRUISE", "JUPITER"]
JunoFGMCoords = Literal['SE', 'SS', 'PL']
JunoFGMTimeResolutions = Literal["1SEC", "1MIN"]

# %% ../../../notebooks/missions/juno/mag.ipynb 6
def download_data(
    start=None,
    end=None,
    phase: JunoPhases = "CRUISE",
    coord: JunoFGMCoords = "SE",
    datatype: JunoFGMTimeResolutions = "1SEC",  # time resolution
) -> list[str]:
    files = pds_download(
        mission="Juno",
        instrument="FGM",
        dataset=phase,
        coord=coord,
        datatype=datatype,
        path=ROOT_DIR / "data/01_raw/",
    )

    return list(files | filter(lambda x: x.endswith(".lbl")))

# %% ../../../notebooks/missions/juno/mag.ipynb 7
def _load_func(file):
    df = pl.from_dataframe(load_lbl(file))
    return (
        df.lazy()
        .with_columns(time=pl.col("SAMPLE UTC").str.to_datetime("%Y %j %H %M %S %f"))
        .drop(["SAMPLE UTC", "DECIMAL DAY", "INSTRUMENT RANGE", "X", "Y", "Z"])
        .sort("time")
    )

def parse_fp(fp):
    fn = fp.split('/')[-1]
    dt_str = fn.split('_')[3][0:7]
    format = "%Y%j"
    return datetime.strptime(dt_str, format)


def load_data(
    start,
    end,
    datatype: str = "1SEC",  # time resolution
) -> pl.DataFrame:
    start = pd.Timestamp(start)
    end = pd.Timestamp(end)
    files = download_data(start, end, datatype=datatype)
    files_dict = {
        file: parse_fp(file) for file in files
    }
    files = [k for k, v in files_dict.items() if start <= v < end]
    return pl.concat(files | select(_load_func))

# %% ../../../notebooks/missions/juno/mag.ipynb 9
def preprocess_data(raw_data: pl.DataFrame) -> pl.DataFrame:
    """
    Preprocess the raw dataset (only minor transformations)

    - Applying naming conventions for columns
    - Parsing and typing data
    - Changing storing format (from `lbl` to `parquet`)
    - Dropping useless columns
    """
    return create_partitions(raw_data, _load_func)

# %% ../../../notebooks/missions/juno/mag.ipynb 11
def process_data(
    raw_data: pl.DataFrame,
    ts: str = None,  # time resolution
) -> pl.DataFrame | dict[str, pl.DataFrame]:
    """
    Partitioning data, for the sake of memory
    """
    data: pl.LazyFrame = pl.concat(func() for func in raw_data.values())
    return (
        data.with_columns(pl.col("time").dt.cast_time_unit("us"))  # issue: https://github.com/pola-rs/polars/issues/12023
        .unique("time")
        .sort("time")
        .pipe(partition_data_by_year)
    )

# %% ../../../notebooks/missions/juno/mag.ipynb 13
def create_pipeline(sat_id="JNO", source="MAG"):
    return create_pipeline_template(
        sat_id=sat_id,
        source=source,
        load_data_fn=download_data,
        preprocess_data_fn=preprocess_data,
        process_data_fn=process_data,
    )

# %% ../../../notebooks/missions/juno/mag.ipynb 18
import pandas
import pdpipe as pdp

# %% ../../../notebooks/missions/juno/mag.ipynb 19
def process_jno_index(df: pandas.DataFrame):
    _index_time_format = "%Y-%jT%H:%M:%S.%f"

    df.columns = df.columns.str.replace(" ", "")
    jno_index_pipeline = pdp.PdPipeline(
        [
            pdp.ColDrop(["PRODUCT_ID", "CR_DATE", "PRODUCT_LABEL_MD5CHECKSUM"]),
            pdp.ApplyByCols("SID", str.rstrip),
            pdp.ApplyByCols("FILE_SPECIFICATION_NAME", str.rstrip),
            pdp.ColByFrameFunc(
                "START_TIME",
                lambda df: pandas.to_datetime(
                    df["START_TIME"], format=_index_time_format
                ),
            ),
            pdp.ColByFrameFunc(
                "STOP_TIME",
                lambda df: pandas.to_datetime(
                    df["STOP_TIME"], format=_index_time_format
                ),
            ),
            # pdp.ApplyByCols(['START_TIME', 'STOP_TIME'], pandas.to_datetime, format=_index_time_format), # NOTE: This is slow
        ]
    )

    return jno_index_pipeline(df)

# %% ../../../notebooks/missions/juno/mag.ipynb 21
from kedro.pipeline import pipeline, node

# %% ../../../notebooks/missions/juno/mag.ipynb 22
def create_jno_index_pipeline():
    jno_index_pipeline = pipeline(
        [
            node(process_jno_index, inputs="raw_JNO_SS_index", outputs="JNO_SS_index"),
            node(process_jno_index, inputs="raw_JNO_J_index", outputs="JNO_J_index"),
            node(
                lambda x1, x2: pandas.concat([x1, x2]),
                inputs=["JNO_SS_index", "JNO_J_index"],
                outputs="JNO_index",
            ),
        ]
    )
    return jno_index_pipeline
