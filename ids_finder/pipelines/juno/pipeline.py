# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../notebooks/missions/juno/index.ipynb.

# %% auto 0
__all__ = ['process_jno_index', 'create_jno_index_pipeline', 'create_pipeline']

# %% ../../../notebooks/missions/juno/index.ipynb 10
#| code-summary: import all the packages needed for the project
#| output: hide
from ...core import extract_features
from fastcore.utils import *
from fastcore.test import *

import polars as pl
import pandas as pd

from loguru import logger

from typing import Callable


# %% ../../../notebooks/missions/juno/index.ipynb 12
from kedro.pipeline import Pipeline, node
from kedro.pipeline.modular_pipeline import pipeline

# %% ../../../notebooks/missions/juno/index.ipynb 18
import pandas
import pdpipe as pdp

# %% ../../../notebooks/missions/juno/index.ipynb 19
def process_jno_index(df: pandas.DataFrame):
    
    _index_time_format = "%Y-%jT%H:%M:%S.%f"
    
    df.columns = df.columns.str.replace(" ", "")
    jno_index_pipeline = pdp.PdPipeline(
        [
            pdp.ColDrop(["PRODUCT_ID", "CR_DATE", "PRODUCT_LABEL_MD5CHECKSUM"]),
            pdp.ApplyByCols("SID", str.rstrip),
            pdp.ApplyByCols("FILE_SPECIFICATION_NAME", str.rstrip),
            pdp.ColByFrameFunc(
                "START_TIME",
                lambda df: pandas.to_datetime(df["START_TIME"], format=_index_time_format),
            ),
            pdp.ColByFrameFunc(
                "STOP_TIME",
                lambda df: pandas.to_datetime(df["STOP_TIME"], format=_index_time_format),
            ),
            # pdp.ApplyByCols(['START_TIME', 'STOP_TIME'], pandas.to_datetime, format=_index_time_format), # NOTE: This is slow
        ]
    )
    
    return jno_index_pipeline(df)


# %% ../../../notebooks/missions/juno/index.ipynb 21
from kedro.pipeline import pipeline, node

# %% ../../../notebooks/missions/juno/index.ipynb 22
def create_jno_index_pipeline():
    jno_index_pipeline = pipeline([
        node(process_jno_index, inputs="raw_JNO_SS_index", outputs="JNO_SS_index"),
        node(process_jno_index, inputs="raw_JNO_J_index", outputs="JNO_J_index"),
        node(lambda x1, x2: pandas.concat([x1, x2]), inputs=["JNO_SS_index", "JNO_J_index"], outputs="JNO_index")
    ])
    return jno_index_pipeline

# %% ../../../notebooks/missions/juno/index.ipynb 28
from .mag import create_pipeline as create_mag_data_pipeline
from .state import create_pipeline as create_state_data_pipeline
from ..default.mission import create_combined_data_pipeline


# %% ../../../notebooks/missions/juno/index.ipynb 29
def create_pipeline(
    sat_id="jno",
    tau="60s",
    ts_mag="1s",  # time resolution of magnetic field data
    ts_state="1h",  # time resolution of state data
) -> Pipeline:
    return (
        create_mag_data_pipeline(sat_id, ts=ts_mag, tau=tau)
        + create_state_data_pipeline(sat_id, ts=ts_state)
        + create_combined_data_pipeline(sat_id, tau=tau, ts_state=ts_state)
    )
