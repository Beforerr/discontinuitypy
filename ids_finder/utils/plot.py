# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/utils/01_plotting.ipynb.

# %% auto 0
__all__ = ['savefig', 'time_stamp', 'setup_mva_plot', 'plot_candidate']

# %% ../../notebooks/utils/01_plotting.ipynb 1
import matplotlib.pyplot as plt

# %% ../../notebooks/utils/01_plotting.ipynb 2
def savefig(name, **kwargs):
    plt.savefig(f"../figures/{name}.png", bbox_inches="tight", **kwargs)
    plt.savefig(f"../figures/{name}.pdf", bbox_inches="tight", **kwargs)

# %% ../../notebooks/utils/01_plotting.ipynb 4
import xarray as xr
import pandas as pd
from datetime import timedelta, datetime

from pyspedas.cotrans.minvar_matrix_make import minvar_matrix_make
from pyspedas import tvector_rotate
from pyspedas.analysis.tvectot import tvectot

from pytplot import tplot
from pytplot import store_data, get_data, split_vec, join_vec
from pytplot import timebar, highlight, degap, options


# %% ../../notebooks/utils/01_plotting.ipynb 5
import matplotlib.pyplot as plt
import scienceplots
from .plot import savefig

plt.style.use(['science', 'nature', 'notebook'])

# %% ../../notebooks/utils/01_plotting.ipynb 6
def time_stamp(ts):
    "Return POSIX timestamp as float."
    return pd.Timestamp(ts, tz="UTC").timestamp()


def setup_mva_plot(
    data: xr.DataArray,
    tstart: datetime,
    tstop: datetime,
    mva_tstart: datetime = None,
    mva_tstop: datetime = None,
):
    if mva_tstart is None:
        mva_tstart = tstart
    if mva_tstop is None:
        mva_tstop = tstop

    mva_b = data.sel(time=slice(mva_tstart, mva_tstop))
    store_data("fgm", data={"x": mva_b.time, "y": mva_b})
    minvar_matrix_make("fgm")  # get the MVA matrix

    temp_b = data.sel(time=slice(tstart, tstop))
    store_data("fgm", data={"x": temp_b.time, "y": temp_b})
    tvar = tvector_rotate("fgm_mva_mat", "fgm")[0]
    ysubtitle = "[nT LMN]"
    legend_names = [r"$B_l$", r"$B_m$", r"$B_n$"]
    
    tvar2plot = tvectot(tvar, join_component=True)
    legend_names = legend_names + [r"$B_{total}$"]

    options(tvar2plot, "ytitle", "$B$")
    options(tvar2plot, "ysubtitle", ysubtitle)
    options(tvar2plot, "legend_names", legend_names)
    
    options(tvar2plot, "thick", 2)
    options(tvar2plot, "char_size", 16)
    
    # tstart_ts = time_stamp(tstart)
    # tstop_ts = time_stamp(tstop)
    # highlight(tvar2plot, [tstart_ts, tstop_ts])
    degap(tvar2plot)
    return tvar2plot

# %% ../../notebooks/utils/01_plotting.ipynb 8
def plot_candidate(candidate: dict, sat_fgm: xr.DataArray, **kwargs):
    if pd.notnull(candidate.get("d_tstart")) and pd.notnull(candidate.get("d_tstop")):
        tvar = setup_mva_plot(
            sat_fgm,
            candidate["tstart"],
            candidate["tstop"],
            candidate["d_tstart"],
            candidate["d_tstop"],
        )
    else:
        tvar = setup_mva_plot(sat_fgm, candidate["tstart"], candidate["tstop"])


    if "d_time" in candidate.keys():
        d_time_ts = time_stamp(candidate["d_time"])
        timebar(d_time_ts, color="red")
    if "d_tstart" in candidate.keys() and not pd.isnull(candidate["d_tstart"]):
        d_start_ts = time_stamp(candidate["d_tstart"])
        timebar(d_start_ts)
    if "d_tstop" in candidate.keys() and not pd.isnull(candidate["d_tstop"]):
        d_stop_ts = time_stamp(candidate["d_tstop"])
        timebar(d_stop_ts)

    tplot(tvar, **kwargs)
    return tvar
